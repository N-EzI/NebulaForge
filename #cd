cd path/to/your/code/folder
python -m venv venv
venv\Scripts\activate
source venv/bin/activate
pip install Flask
from datetime import datetime
import random
import requests
from flask import Flask, request, jsonify, g, render_template_string, session, redirect, url_for, flash
import sqlite3
import hashlib
import os

app = Flask(__name__)
app.secret_key = os.urandom(24)  # Secret key for session management

DATABASE = 'taxi_app.db'

def get_db():
    db = getattr(g, '_database', None)
    if db is None:
        db = g._database = sqlite3.connect(DATABASE)
    return db

@app.teardown_appcontext
def close_db(exception):
    db = getattr(g, '_database', None)
    if db is not None:
        db.close()

def init_db():
    with app.app_context():
        db = get_db()
        with app.open_resource('schema.sql', mode='r') as f:
            db.cursor().executescript(f.read())
        db.commit()

def insert_mock_data():
    with app.app_context():
        db = get_db()
        cur = db.cursor()
        cur.execute("INSERT INTO users (name, phone_number, password) VALUES (?, ?, ?)",
                    ('Alice', '1234567890', hashlib.sha256('password123'.encode()).hexdigest()))
        cur.execute("INSERT INTO drivers (name, license_number, is_verified, vehicle_type) VALUES (?, ?, ?, ?)",
                    ('Driver1', 'DL123', 1, 'Standard'))
        cur.execute("INSERT INTO taxis (driver_id, location, is_available) VALUES (?, ?, ?)",
                    (1, 'Location1', 1))
        db.commit()

@app.route('/')
def index():
    return render_template_string("Welcome to the Taxi App!")

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        phone_number = request.form['phone_number']
        password = hashlib.sha256(request.form['password'].encode()).hexdigest()
        user = authenticate_user(phone_number, password)
        if user:
            session['user_id'] = user[0]
            flash('Login successful', 'success')
            return redirect(url_for('dashboard'))
        else:
            flash('Invalid credentials. Please try again.', 'error')
    return render_template_string("Login form here")

@app.route('/dashboard')
def dashboard():
    if 'user_id' in session:
        user = get_user_by_id(session['user_id'])
        if user:
            # Display user dashboard with ride history, ratings, etc.
            return f"Welcome, {user[1]}! Your dashboard goes here."
    flash('You need to log in first.', 'error')
    return redirect(url_for('login'))

@app.route('/request_ride', methods=['POST'])
def request_ride():
    if 'user_id' in session:
        user = get_user_by_id(session['user_id'])
        if user:
            ride_option = request.form['ride_option']
            distance = float(request.form['distance'])
            taxi_id = find_available_taxi()
            if taxi_id is not None:
                start_ride(user[0], taxi_id, ride_option, distance)
                flash('Ride requested successfully', 'success')
            else:
                flash('No available taxis', 'error')
            return redirect(url_for('dashboard'))
    flash('You need to log in first.', 'error')
    return redirect(url_for('login'))

def authenticate_user(phone_number, password):
    with app.app_context():
        db = get_db()
        cur = db.cursor()
        cur.execute("SELECT id, name FROM users WHERE phone_number = ? AND password = ?", (phone_number, password))
        return cur.fetchone()

def get_user_by_id(user_id):
    with app.app_context():
        db = get_db()
        cur = db.cursor()
        cur.execute("SELECT * FROM users WHERE id = ?", (user_id,))
        return cur.fetchone()

def find_available_taxi():
    with app.app_context():
        db = get_db()
        cur = db.cursor()
        cur.execute("SELECT id FROM taxis WHERE is_available = 1")
        row = cur.fetchone()
        if row is not None:
            taxi_id = row[0]
            return taxi_id
        return None

def start_ride(user_id, taxi_id, ride_option, distance):
    with app.app_context():
        db = get_db()
        cur = db.cursor()
        cur.execute("UPDATE taxis SET is_available = 0 WHERE id = ?", (taxi_id,))
        cur.execute("INSERT INTO rides (user_id, taxi_id, ride_option, distance, start_time, status) VALUES (?, ?, ?, ?, ?, ?)",
                    (user_id, taxi_id, ride_option, distance, datetime.now(), 'Pending'))
        db.commit()

if __name__ == '__main__':
    init_db()
    insert_mock_data()
    app.run()
